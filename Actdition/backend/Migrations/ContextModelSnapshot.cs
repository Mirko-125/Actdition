// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Film", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Produkcijakod")
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("poster")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("trajanjeMinuta")
                        .HasColumnType("int");

                    b.Property<int>("uzrast")
                        .HasColumnType("int");

                    b.Property<string>("zanr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Produkcijakod");

                    b.ToTable("Film");
                });

            modelBuilder.Entity("Models.Korisnik", b =>
                {
                    b.Property<string>("username")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("datumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("hashpass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pol")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("profilnaSlika")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("verifikovan")
                        .HasColumnType("int");

                    b.HasKey("username");

                    b.ToTable("Korisnici");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Korisnik");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Models.PonudaUloga", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Glumacusername")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("mp4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("naslov")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("opisuloge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pdf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pnguloge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Glumacusername");

                    b.ToTable("PonudeUloga");
                });

            modelBuilder.Entity("Models.Poruka", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Glumacusername")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imeFilma")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imeUloge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Glumacusername");

                    b.ToTable("Poruke");
                });

            modelBuilder.Entity("Models.Predlog", b =>
                {
                    b.Property<int>("idFilma")
                        .HasColumnType("int");

                    b.Property<string>("InternalData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idFilma");

                    b.ToTable("Predlozi");
                });

            modelBuilder.Entity("Models.Produkcija", b =>
                {
                    b.Property<string>("kod")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("kod");

                    b.ToTable("Produkcije");
                });

            modelBuilder.Entity("Models.Sesija", b =>
                {
                    b.Property<string>("token")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("datumVazenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("token");

                    b.ToTable("Sesije");
                });

            modelBuilder.Entity("Models.UlogaFilm", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("Filmid")
                        .HasColumnType("int");

                    b.Property<string>("bojaKose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bojaOciju")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("godineMax")
                        .HasColumnType("int");

                    b.Property<int>("godineMin")
                        .HasColumnType("int");

                    b.Property<string>("imelika")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pnglika")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("tezinaMax")
                        .HasColumnType("real");

                    b.Property<float>("tezinaMin")
                        .HasColumnType("real");

                    b.Property<float>("visinaMax")
                        .HasColumnType("real");

                    b.Property<float>("visinaMin")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("Filmid");

                    b.ToTable("UlogeFilm");
                });

            modelBuilder.Entity("Models.Verfikacija", b =>
                {
                    b.Property<string>("token")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("token");

                    b.ToTable("Verfikacije");
                });

            modelBuilder.Entity("Models.Glumac", b =>
                {
                    b.HasBaseType("Models.Korisnik");

                    b.Property<string>("bojaKose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bojaOciju")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nacionalnost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("tezina")
                        .HasColumnType("real");

                    b.Property<float>("visina")
                        .HasColumnType("real");

                    b.ToTable("Korisnici");

                    b.HasDiscriminator().HasValue("Glumac");
                });

            modelBuilder.Entity("Models.KastingDirektor", b =>
                {
                    b.HasBaseType("Models.Korisnik");

                    b.Property<string>("prKod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Korisnici");

                    b.HasDiscriminator().HasValue("KastingDirektor");
                });

            modelBuilder.Entity("Models.Producent", b =>
                {
                    b.HasBaseType("Models.Korisnik");

                    b.Property<string>("adresaAudicije")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("produkcijakod")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)");

                    b.HasIndex("produkcijakod");

                    b.ToTable("Korisnici");

                    b.HasDiscriminator().HasValue("Producent");
                });

            modelBuilder.Entity("Models.Film", b =>
                {
                    b.HasOne("Models.Produkcija", null)
                        .WithMany("filmovi")
                        .HasForeignKey("Produkcijakod");
                });

            modelBuilder.Entity("Models.PonudaUloga", b =>
                {
                    b.HasOne("Models.Glumac", null)
                        .WithMany("ponudjeneUloge")
                        .HasForeignKey("Glumacusername");
                });

            modelBuilder.Entity("Models.Poruka", b =>
                {
                    b.HasOne("Models.Glumac", null)
                        .WithMany("poruke")
                        .HasForeignKey("Glumacusername");
                });

            modelBuilder.Entity("Models.UlogaFilm", b =>
                {
                    b.HasOne("Models.Film", null)
                        .WithMany("listaUloga")
                        .HasForeignKey("Filmid");
                });

            modelBuilder.Entity("Models.Producent", b =>
                {
                    b.HasOne("Models.Produkcija", "produkcija")
                        .WithMany()
                        .HasForeignKey("produkcijakod")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("produkcija");
                });

            modelBuilder.Entity("Models.Film", b =>
                {
                    b.Navigation("listaUloga");
                });

            modelBuilder.Entity("Models.Produkcija", b =>
                {
                    b.Navigation("filmovi");
                });

            modelBuilder.Entity("Models.Glumac", b =>
                {
                    b.Navigation("ponudjeneUloge");

                    b.Navigation("poruke");
                });
#pragma warning restore 612, 618
        }
    }
}
